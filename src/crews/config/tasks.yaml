generate_explanation:
  description: >
    Create a mathematical explanation that simulates a teacher explaining concepts while writing on a whiteboard.
    For the query: {user_query}

    Think of this as a teaching script where each step pairs:
    - Natural speech (what the teacher says while writing)
    - MathML math (what's visible on the board at that moment)

    Output Format:
    steps:
      - natural: "What the teacher says during this step"
        math: "The complete MathML notation visible during this step"

    Important: Each step shows the complete board state. Previous content is not preserved between steps, so each math field must contain everything that should be visible at that moment.

    Output Requirements:

    1. Mathematical Correctness:
       - Verify all mathematical expressions and calculations are correct
       - Check that equations maintain equality through transformations
       - Confirm all algebraic manipulations follow valid rules
       - Ensure numerical calculations are accurate
       - Validate mathematical properties and theorems are applied correctly
       - Double-check signs in operations (especially with negatives)
       - Verify proper order of operations is maintained
       - Confirm all mathematical definitions are used accurately

    2. Natural Language (TTS) Requirements:
       - Use complete, well-formed sentences
       - Include appropriate pauses using punctuation (periods, commas)
       - Avoid abbreviations, symbols, or mathematical notation in the natural text
       - Use verbal bridges like "now," "next," "then" to indicate progression
       - Spell out numbers when speaking (e.g., "negative two" instead of "-2")
       - Use clear transition words to indicate what you're doing
       - Include verbal cues about what's being written or highlighted
       - When referring to equations, describe them verbally
       - Use prosody-friendly language that flows naturally when spoken

    3. Mathematical Display Techniques:
       - Progressive Building:
         * Use <mspace linebreak="newline"/> for line breaks
         * For consecutive line breaks, use multiple mspace elements
         * Keep original expression visible while showing work below
         * Show intermediate steps while maintaining context
         * Build complex expressions step by step
       
       - Visual Emphasis:
         * Use mathcolor="blue" for highlighting
         * Use consistent color meanings (e.g., blue for current focus)
         * Use <menclose notation="box"> for boxing important elements
         * Use <mtext> for annotations with proper spacing
         * Example: <math><mrow><mtext>This is </mtext><mi mathcolor="blue">x</mi><mtext> squared</mtext></mrow></math>
       
       - Layout Structure:
         * Original problem/expression typically at the top
         * Working steps shown below using line breaks
         * Important results or conclusions emphasized
         * Clear visual hierarchy in multi-line displays
         * Use proper spacing between elements

    4. Step Structure:
       - First step:
         * Clear introduction of the concept
         * Include "step by step" in the introduction
         * Present the initial problem clearly
       
       - Subsequent steps should:
         * Show complete board state (including previous work when relevant)
         * Build progressively on previous steps
         * Use visual emphasis to guide attention
         * Connect verbal explanation to highlighted elements
         * Break down complex operations into smaller parts
         * Use multiple lines to show work progression
         * Verify mathematical correctness at each step

    5. Format Requirements:
       natural: 
         - ONLY natural language optimized for TTS
         - NO mathematical symbols or notation
         - NO special characters except standard punctuation
       math: 
         - MUST contain complete board state for each step
         - Valid MathML with correct syntax and proper spacing
         - Use mathcolor attribute for colored text
         - Use <mtext> for text mode with proper spacing
         - Use <mspace linebreak="newline"/> for line breaks
         - Include all previous relevant work
         - Ensure all mathematical expressions are correct

    6. Teaching Flow:
       - Each step should feel like a natural teaching moment
       - Visual emphasis should match verbal explanation
       - Clear progression in both speech and visuals
       - Appropriate pacing with verbal cues for transitions
       - Break down complex concepts into digestible pieces
       - Use color and emphasis to guide understanding
       - Verify mathematical accuracy throughout explanation

    Example MathML Formatting:
    <math>
      <mrow>
        <mtext>The least common denominator is: </mtext>
        <mn mathcolor="blue">6</mn>
        <mspace linebreak="newline"/>
        <mfrac>
          <mn>1</mn>
          <mn>2</mn>
        </mfrac>
        <mo>=</mo>
        <mfrac>
          <mrow><mn>1</mn><mo>⋅</mo><mn mathcolor="blue">3</mn></mrow>
          <mrow><mn>2</mn><mo>⋅</mo><mn mathcolor="blue">3</mn></mrow>
        </mfrac>
        <mo>=</mo>
        <mfrac>
          <mn mathcolor="blue">3</mn>
          <mn mathcolor="blue">6</mn>
        </mfrac>
      </mrow>
    </math>

    Multi-line Example:
    <math>
      <mrow>
        <msup><mi>x</mi><mn>2</mn></msup>
        <mo>+</mo>
        <mn>5</mn>
        <mi>x</mi>
        <mo>+</mo>
        <mn>6</mn>
        <mo>=</mo>
        <mn>0</mn>
        <mspace linebreak="newline"/>
        <mspace linebreak="newline"/>
        <mtext>Factor into: </mtext>
        <mo>(</mo>
        <mi>x</mi>
        <mo>+</mo>
        <mn>2</mn>
        <mo>)</mo>
        <mo>(</mo>
        <mi>x</mi>
        <mo>+</mo>
        <mn>3</mn>
        <mo>)</mo>
        <mo>=</mo>
        <mn>0</mn>
        <mspace linebreak="newline"/>
        <mspace linebreak="newline"/>
        <mtext>Solutions: </mtext>
        <mi>x</mi>
        <mo>=</mo>
        <mo>-</mo>
        <mn>2</mn>
        <mtext> or </mtext>
        <mi>x</mi>
        <mo>=</mo>
        <mo>-</mo>
        <mn>3</mn>
      </mrow>
    </math>

  agent: math_teacher
  expected_output: "JSON with paired speech and MathML steps"

optimize_visual_narrative:
  description: >
    Transform a mathematical explanation into an engaging visual narrative by enhancing
    the MathML output with progressive build-up and visual emphasis that synchronizes
    with the spoken explanation.
    Input will be the output from generate_explanation. Your task is to:
    1. Break down steps into optimal visual frames
    2. Add visual emphasis and highlighting
    3. Create smooth visual transitions
    4. Synchronize visuals with spoken explanation
    5. Verify mathematical correctness of all expressions

    Output Structure:
    * frames: list of visual teaching moments, each with:
      - natural: what the teacher says
      - math: complete MathML board state with visual enhancements

    Visual Enhancement Examples:

    Progressive Build-up Example - Introducing Quadratic Formula:

    Frame 1:
    natural: Let's start with a quadratic equation in standard form.
    math: <math><mrow><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow></math>

    Frame 2:
    natural: First, look at the coefficient of x squared, which we call a.
    math: <math><mrow><mi mathcolor="blue">a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow></math>

    Frame 3:
    natural: These three terms form our quadratic expression.
    math: <math>
      <mrow>
        <munder>
          <mrow><mi mathcolor="blue">a</mi><msup><mi>x</mi><mn>2</mn></msup></mrow>
          <mtext>first term</mtext>
        </munder>
        <mo>+</mo>
        <munder>
          <mrow><mi>b</mi><mi>x</mi></mrow>
          <mtext>second term</mtext>
        </munder>
        <mo>+</mo>
        <munder>
          <mi>c</mi>
          <mtext>third term</mtext>
        </munder>
        <mo>=</mo>
        <mn>0</mn>
      </mrow>
    </math>

    Visual Focus Example - Factoring:

    Frame 1:
    natural: To factor this expression, we need to find numbers that multiply to give us positive 6 and add to give us positive 5.
    math: <math>
      <mrow>
        <msup><mi>x</mi><mn>2</mn></msup>
        <mo>+</mo>
        <mn>5</mn>
        <mi>x</mi>
        <mo>+</mo>
        <mn>6</mn>
        <mo>=</mo>
        <mn>0</mn>
        <mspace linebreak="newline"/>
        <mtext>Need: product = 6, sum = 5</mtext>
      </mrow>
    </math>

    Frame 2:
    natural: Let's list out the factors of 6 and find the pair that adds to 5.
    math: <math>
      <mrow>
        <msup><mi>x</mi><mn>2</mn></msup>
        <mo>+</mo>
        <mn>5</mn>
        <mi>x</mi>
        <mo>+</mo>
        <mn>6</mn>
        <mo>=</mo>
        <mn>0</mn>
        <mspace linebreak="newline"/>
        <mtext>Factors of 6:</mtext>
        <mspace linebreak="newline"/>
        <mn>1</mn>
        <mo>×</mo>
        <mn>6</mn>
        <mo>=</mo>
        <mn>6</mn>
        <mtext>, sum = 7</mtext>
        <mspace linebreak="newline"/>
        <mrow mathcolor="blue">
          <mn>2</mn>
          <mo>×</mo>
          <mn>3</mn>
          <mo>=</mo>
          <mn>6</mn>
          <mtext>, sum = 5</mtext>
        </mrow>
        <mo>✓</mo>
      </mrow>
    </math>

    Requirements:

    1. Mathematical Verification:
      - Review all expressions for mathematical accuracy
      - Verify correctness of all calculations and transformations
      - Ensure mathematical properties are applied properly
      - Confirm logical progression of mathematical steps
      - Check consistency of mathematical notation
      - Validate all algebraic manipulations

    2. Visual Progression:
      - Break down complex steps into clear visual frames
      - Build concepts piece by piece
      - Maintain context while adding new elements
      - Show clear visual evolution
      - Use appropriate pacing

    3. Enhancement Techniques:
      - Colors (mathcolor attribute)
      - Boxes (<menclose notation="box">)
      - Underscores (<munder>)
      - Annotations (<mtext>)
      - Arrows (→, ↓)
      - Alignment using <mtable> and <mtr> for related equations
      - Checkmarks (✓) for completed steps
      - Line breaks (<mspace linebreak="newline"/>)

    4. Frame Guidelines:
      - Each frame must contain complete board state
      - Clear visual hierarchy
      - Consistent use of visual elements
      - Smooth transitions between frames
      - Visual elements should support spoken text
      - Proper spacing between elements
      - Verify mathematical correctness in each frame

    5. Visual Design Principles:
      - Focus attention on current concept
      - Build complexity gradually
      - Keep related elements visually connected
      - Use consistent visual language
      - Maintain clear layout with adequate spacing
  agent: math_teacher
  expected_output: "JSON with enhanced visual narrative"
  context:
    - generate_explanation
